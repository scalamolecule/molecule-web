import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as s,d as h,e as k,b as i,w as n,r as e,o as g}from"./app-7_dm1Hvo.js";const y={};function A(o,a){const p=e("nobr"),B=e("CodeTabs");return g(),d("div",null,[a[15]||(a[15]=s("h1",{id:"validation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#validation"},[s("span",null,"Validation")])],-1)),s("p",null,[a[1]||(a[1]=i("Attributes can be defined in your Data Model with a validation lambda of type ")),k(p,null,{default:n(()=>a[0]||(a[0]=[s("code",null,"<baseType> => Boolean",-1)])),_:1,__:[0]}),a[2]||(a[2]=i(". Molecule will then only transact valid values for the Attribute."))]),a[16]||(a[16]=h(`<div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> intAttr</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">       =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate(_ </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Int =&gt; Boolean</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> localDateAttr</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneLocalDate</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  .validate(_.compareTo(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">LocalDate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.of(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">2002</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// LocalDate =&gt; Boolean</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// etc for all primitive types</span></span></code></pre></div><p>Validations even works for <code>Seq</code> and <code>Set</code> types, but not <code>Map</code> types.</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// All values of Set validated</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> setIntAttr</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">       =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> setInt.validate(_ </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> setLocalDateAttr</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> setLocalDate</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  .validate(_.compareTo(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">LocalDate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.of(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">2002</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// etc</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// All values of Seq validated</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> seqIntAttr</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">       =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> seqInt.validate(_ </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> seqLocalDateAttr</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> seqLocalDate</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  .validate(_.compareTo(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">LocalDate</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.of(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">2002</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// etc</span></span></code></pre></div><h2 id="save-errors" tabindex="-1"><a class="header-anchor" href="#save-errors"><span>Save errors</span></a></h2><p>Saving a value with the synchronous api that doesn&#39;t satisfy the validation lambda will throw a ValidationErrors exception containing a Map of Attribute name to Seq of error message pairs.</p><p>For the asynchronous api, a failed Future is returned also with the ValidationsErrors.</p><p>And for the ZIO api, ValidationErrors is returned as the error type:</p>`,8)),k(B,{id:"24",data:[{id:"Sync"},{id:"Async"},{id:"ZIO"}],"tab-id":"coord"},{title0:n(({value:l,isActive:t})=>a[3]||(a[3]=[i("Sync")])),title1:n(({value:l,isActive:t})=>a[4]||(a[4]=[i("Async")])),title2:n(({value:l,isActive:t})=>a[5]||(a[5]=[i("ZIO")])),tab0:n(({value:l,isActive:t})=>a[6]||(a[6]=[s("div",{class:"language-scala","data-highlighter":"shiki","data-ext":"scala","data-title":"scala",style:{"--shiki-light":"#abb2bf","--shiki-dark":"#abb2bf","--shiki-light-bg":"#282c34","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-dark-pro one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"try"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"  Type"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},".int("),s("span",{style:{"--shiki-light":"#D19A66","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},").save.transact")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"} "),s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"catch"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#7F848E","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"  // ValidationErrors thrown")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"  case"),s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}}," ValidationErrors"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(errorMap) =>")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"    errorMap ==>")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"      Map"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'        "Type.int"'),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}}," -> "),s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"Seq"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"          s"),s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'"""Type.int with value `1` doesn\'t satisfy validation:')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},"             |_ > 2")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'             |"""'),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},".stripMargin")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"        )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"      )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"}")])])])],-1)])),tab1:n(({value:l,isActive:t})=>a[7]||(a[7]=[s("div",{class:"language-scala","data-highlighter":"shiki","data-ext":"scala","data-title":"scala",style:{"--shiki-light":"#abb2bf","--shiki-dark":"#abb2bf","--shiki-light-bg":"#282c34","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-dark-pro one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"Type"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},".int("),s("span",{style:{"--shiki-light":"#D19A66","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},").save.transact.recover {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#7F848E","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"  // Failed Future with ValidationErrors")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"  case"),s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}}," ValidationErrors"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(errorMap) =>")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"    errorMap ==>")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"      Map"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'        "Type.int"'),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}}," -> "),s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"Seq"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"          s"),s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'"""Type.int with value `1` doesn\'t satisfy validation:')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},"             |_ > 2")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'             |"""'),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},".stripMargin")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"        )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"      )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"}")])])])],-1)])),tab2:n(({value:l,isActive:t})=>a[8]||(a[8]=[s("div",{class:"language-scala","data-highlighter":"shiki","data-ext":"scala","data-title":"scala",style:{"--shiki-light":"#abb2bf","--shiki-dark":"#abb2bf","--shiki-light-bg":"#282c34","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-dark-pro one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"Type"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},".int("),s("span",{style:{"--shiki-light":"#D19A66","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},").save.transact.flip.map {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#7F848E","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"  // ZIO error of ValidationErrors")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"  case"),s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}}," ValidationErrors"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(errorMap) => assertTrue(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"    errorMap "),s("span",{style:{"--shiki-light":"#56B6C2","--shiki-dark":"#56B6C2"}},"==")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"      Map"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'        "Type.int"'),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}}," -> "),s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"Seq"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"          s"),s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'"""Type.int with value `1` doesn\'t satisfy validation:')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},"             |_ > 2")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'             |"""'),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},".stripMargin")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"        )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"      )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"  )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"}")])])])],-1)])),_:1}),a[17]||(a[17]=h(`<h2 id="insert-errors" tabindex="-1"><a class="header-anchor" href="#insert-errors"><span>Insert errors</span></a></h2><p>Insertion is a bit more complex since multiple rows of data can be inserted in a single transaction. So errors can occur for various rows and various Attributes. Here&#39;s an example of two rows failing validation (using the asynchronous api). Note how the coordinates is returned with the <code>InsertErrors</code> exception type containing Sequences of <code>InsertError</code>s for each failed row:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  _ &lt;- </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Type</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.int.long.insert(</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">0L</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1L</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    ).transact.recover {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">      case</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> InsertErrors</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(errors, _) =&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">        errors ==&gt; </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Seq</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">          (</span></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">            0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// first row</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">            Seq</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">              InsertError</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">                0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// tuple index for \`int\` Attribute</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">                &quot;Type.int&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">                Seq</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">                  s</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;&quot;&quot;Type.int with value \`0\` doesn&#39;t satisfy validation:</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">                     |_ &gt; 2</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">                     |&quot;&quot;&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.stripMargin</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">                ),</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">                Nil</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">              ),</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">              InsertError</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">                1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// tuple index for \`long\` Attribute</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">                &quot;Type.long&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">                Seq</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">                  s</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;&quot;&quot;Type.long with value \`0\` doesn&#39;t satisfy validation:</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">                     |_ &gt; 2L</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">                     |&quot;&quot;&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.stripMargin</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">                ),</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">                Nil</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">              )</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">            )</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">          ),</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">          (</span></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">            1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// second row</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">            Seq</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">              InsertError</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">                0</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// tuple index for \`int\` Attribute</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">                &quot;Type.int&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">                Seq</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">                  s</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;&quot;&quot;Type.int with value \`1\` doesn&#39;t satisfy validation:</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">                     |_ &gt; 2</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">                     |&quot;&quot;&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.stripMargin</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">                ),</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">                Nil</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">              ),</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">              InsertError</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">                1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// tuple index for \`long\` Attribute</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">                &quot;Type.long&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">                Seq</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">                  s</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;&quot;&quot;Type.long with value \`1\` doesn&#39;t satisfy validation:</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">                     |_ &gt; 2L</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">                     |&quot;&quot;&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.stripMargin</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">                ),</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">                Nil</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">              )</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">            )</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">          )</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">        )</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">yield</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> ()</span></span></code></pre></div><h2 id="update-errors" tabindex="-1"><a class="header-anchor" href="#update-errors"><span>Update errors</span></a></h2><p>Validation of updates is similar to saves:</p>`,5)),k(B,{id:"48",data:[{id:"Sync"},{id:"Async"},{id:"ZIO"}],"tab-id":"coord"},{title0:n(({value:l,isActive:t})=>a[9]||(a[9]=[i("Sync")])),title1:n(({value:l,isActive:t})=>a[10]||(a[10]=[i("Async")])),title2:n(({value:l,isActive:t})=>a[11]||(a[11]=[i("ZIO")])),tab0:n(({value:l,isActive:t})=>a[12]||(a[12]=[s("div",{class:"language-scala","data-highlighter":"shiki","data-ext":"scala","data-title":"scala",style:{"--shiki-light":"#abb2bf","--shiki-dark":"#abb2bf","--shiki-light-bg":"#282c34","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-dark-pro one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"try"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"  Type"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(id).int("),s("span",{style:{"--shiki-light":"#D19A66","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},").update.transact")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"} "),s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"catch"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#7F848E","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"  // ValidationErrors thrown")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"  case"),s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}}," ValidationErrors"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(errorMap) =>")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"    errorMap ==>")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"      Map"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'        "Type.int"'),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}}," -> "),s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"Seq"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"          s"),s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'"""Type.int with value `1` doesn\'t satisfy validation:')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},"             |_ > 2")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'             |"""'),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},".stripMargin")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"        )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"      )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"}")])])])],-1)])),tab1:n(({value:l,isActive:t})=>a[13]||(a[13]=[s("div",{class:"language-scala","data-highlighter":"shiki","data-ext":"scala","data-title":"scala",style:{"--shiki-light":"#abb2bf","--shiki-dark":"#abb2bf","--shiki-light-bg":"#282c34","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-dark-pro one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"Type"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(id).int("),s("span",{style:{"--shiki-light":"#D19A66","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},").update.transact.recover {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#7F848E","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"  // Failed Future with ValidationErrors")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"  case"),s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}}," ValidationErrors"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(errorMap) =>")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"    errorMap ==>")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"      Map"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'        "Type.int"'),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}}," -> "),s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"Seq"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"          s"),s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'"""Type.int with value `1` doesn\'t satisfy validation:')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},"             |_ > 2")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'             |"""'),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},".stripMargin")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"        )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"      )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"}")])])])],-1)])),tab2:n(({value:l,isActive:t})=>a[14]||(a[14]=[s("div",{class:"language-scala","data-highlighter":"shiki","data-ext":"scala","data-title":"scala",style:{"--shiki-light":"#abb2bf","--shiki-dark":"#abb2bf","--shiki-light-bg":"#282c34","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-dark-pro one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"Type"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(id).int("),s("span",{style:{"--shiki-light":"#D19A66","--shiki-dark":"#D19A66"}},"1"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},").update.transact.flip.map {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#7F848E","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"  // ZIO error of ValidationErrors")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"  case"),s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}}," ValidationErrors"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(errorMap) => assertTrue(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"    errorMap "),s("span",{style:{"--shiki-light":"#56B6C2","--shiki-dark":"#56B6C2"}},"==")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"      Map"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'        "Type.int"'),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}}," -> "),s("span",{style:{"--shiki-light":"#E5C07B","--shiki-dark":"#E5C07B"}},"Seq"),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#C678DD","--shiki-dark":"#C678DD"}},"          s"),s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'"""Type.int with value `1` doesn\'t satisfy validation:')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},"             |_ > 2")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#98C379","--shiki-dark":"#98C379"}},'             |"""'),s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},".stripMargin")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"        )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"      )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"  )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#ABB2BF","--shiki-dark":"#ABB2BF"}},"}")])])])],-1)])),_:1}),a[18]||(a[18]=h(`<h2 id="custom-errors" tabindex="-1"><a class="header-anchor" href="#custom-errors"><span>Custom errors</span></a></h2><p>Custom error messages can be returned if validation fails</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> withMsg</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate(</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  _ </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  &quot;One-line error msg&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p><code>$v</code> can be used in error messages and will be replaced by Molecule with the failed value.</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> withValue</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate(</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  _ </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  &quot;One-line error msg. Found $v&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// One-line error msg. Found 1</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> multilineMsgWithValue</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate((</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">v</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) =&gt; v.</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  &quot;&quot;&quot;Validation failed:</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">    |Input value $v is not bigger than 2.&quot;&quot;&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.stripMargin</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Validation failed:</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Input value 1 is not bigger than 2.</span></span></code></pre></div><h2 id="validation-logic" tabindex="-1"><a class="header-anchor" href="#validation-logic"><span>Validation logic</span></a></h2><p>A validation body with multiple lines can be used</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> multiLine</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">  =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate { v =&gt;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">   =</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 22</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> data </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 10</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> result</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>And together with a custom error message too</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> multiLine2</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate(</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  { v =&gt;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">   =</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 22</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">      data </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 10</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> result</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  &quot;One-line error msg. Failed value: $v&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><h2 id="multiple-validations" tabindex="-1"><a class="header-anchor" href="#multiple-validations"><span>Multiple validations</span></a></h2><p>Multiple validations and error messages can be added as a partial function:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> multipleErrors</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate(</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  =&gt; </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;Test 1: Number must be bigger than 2. Found: $v&quot;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;Test 2: Number must be smaller than 10. Found: $v&quot;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;Test 3: Number must not be 7&quot;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // Comments in validation code blocks are transferred to boilerplate code</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">      val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> divider</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">      v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> divider </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }                =&gt;</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">      &quot;&quot;&quot;Test 4: Number must</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">        |be odd. Found: $v&quot;&quot;&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.stripMargin</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  }: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">PartialFunction</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// (not needed in Scala 2.13 and 3.x)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><h2 id="attr-references" tabindex="-1"><a class="header-anchor" href="#attr-references"><span>Attr references</span></a></h2><p>Values of other Attributes can be used in validation logic:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> int</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">        =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> noErrorMsg</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate(_ </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> int.value)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> int1</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">     =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> errorMsg</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate(</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  _ </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> int1.value,</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  &quot;One-line error msg&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> int2</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">              =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> errorMsgWithValue</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate(</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  _ </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> int2.value,</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  &quot;One-line error msg. Found $v&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> int3</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">         =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> multilineMsg</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate((</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">v</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) =&gt; v.</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(int3.value),</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  &quot;&quot;&quot;Validation failed:</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">    |Input value \`$v\` is not bigger than \`int3\` value \`$int3\`.&quot;&quot;&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.stripMargin</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> int4</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">      =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> multiLine</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate { v =&gt;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">   =</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 22</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> data </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> int4.value</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> result</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> int5</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">       =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> multiLine2</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate(</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  { v =&gt;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">   =</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 22</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">      data </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> int5.value</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> result</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  &quot;One-line error msg&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> int6</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">       =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> multiLine3</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate({ v =&gt;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">   =</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 22</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> data </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> int6.value</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> result</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  &quot;&quot;&quot;Long error explanation</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">    |with multiple lines&quot;&quot;&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.stripMargin</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> int7</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">  =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> logic</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate(</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  v =&gt; v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 9</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> int7.value </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">  &quot;Value must be an odd number between 3 and 9 but not \`int7\` value \`$int7\`&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> int8</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">           =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">            =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneString</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> intSet</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">         =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> setInt</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> strs</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">           =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> setString</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> multipleErrors</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt.validate(</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">      &quot;Test 1: Number must be bigger than 4. Found: $v&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> int8.value =&gt;</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">      &quot;Test 2: Number must be bigger than \`int8\` value \`$int8\`. Found: $v&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> str.value.length </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">      &quot;Test 3: Number must be smaller than \`str\` value \`$str\` length \`\${str.length}\` * 2. Found: $v&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">      v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> intSet.value.head </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 3</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    } =&gt; </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;Test 4: Number must not be \`intSet\` head value \`\${intSet.head}\` minus 3. Found: $v&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">      val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> divider</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> strs.value.size</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">      v </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> divider </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    } =&gt;</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">      &quot;&quot;&quot;Test 5: Number must</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">        |be odd. Found: $v&quot;&quot;&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.stripMargin</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  }: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">PartialFunction</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Not needed in Scala 2.13 and 3.x</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><h5 id="validation-compliance-tests" tabindex="-1"><a class="header-anchor" href="#validation-compliance-tests"><span><a href="https://github.com/scalamolecule/molecule/tree/main/db/compliance/shared/src/test/scala/molecule/db/compliance/test/validation" target="_blank" rel="noopener noreferrer"><i class="fas fa-handshake" style="margin-right:4px;"></i> Validation compliance tests</a></span></a></h5>`,18))])}const c=r(y,[["render",A],["__file","validation.html.vue"]]),D=JSON.parse('{"path":"/database/setup/validation.html","title":"Validation","lang":"en-US","frontmatter":{"description":"Validation Attributes can be defined in your Data Model with a validation lambda of type . Molecule will then only transact valid values for the Attribute. Validations even work...","head":[["meta",{"property":"og:url","content":"https://www.scalamolecule.org/intro/database/setup/validation.html"}],["meta",{"property":"og:site_name","content":"Molecule"}],["meta",{"property":"og:title","content":"Validation"}],["meta",{"property":"og:description","content":"Validation Attributes can be defined in your Data Model with a validation lambda of type . Molecule will then only transact valid values for the Attribute. Validations even work..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Validation\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Save errors","slug":"save-errors","link":"#save-errors","children":[]},{"level":2,"title":"Insert errors","slug":"insert-errors","link":"#insert-errors","children":[]},{"level":2,"title":"Update errors","slug":"update-errors","link":"#update-errors","children":[]},{"level":2,"title":"Custom errors","slug":"custom-errors","link":"#custom-errors","children":[]},{"level":2,"title":"Validation logic","slug":"validation-logic","link":"#validation-logic","children":[]},{"level":2,"title":"Multiple validations","slug":"multiple-validations","link":"#multiple-validations","children":[]},{"level":2,"title":"Attr references","slug":"attr-references","link":"#attr-references","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"database/setup/validation.md","autoDesc":true}');export{c as comp,D as data};
