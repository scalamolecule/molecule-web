import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as i,o as n}from"./app-BihnMuaJ.js";const l={};function t(p,s){return n(),e("div",null,s[0]||(s[0]=[i(`<h1 id="sbt-setup" tabindex="-1"><a class="header-anchor" href="#sbt-setup"><span>SBT setup</span></a></h1><p>Molecule uses the sbt <a href="https://github.com/scalamolecule/sbt-molecule" target="_blank" rel="noopener noreferrer">MoleculePlugin</a> to generate boilerplate code that enables you to write molecules.</p><p>Add the latest version of the plugin in <code>project/plugins.sbt</code>:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">addSbtPlugin(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;org.scalamolecule&quot;</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;sbt-molecule&quot;</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;1.19.4&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>Enable the plugin in your <code>build.sbt</code> file and import the molecule library that corresponds to the database(s) that you will use:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">lazy</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> app</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> project</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  .enablePlugins(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">MoleculePlugin</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  .settings(</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">      libraryDependencies ++= </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Seq</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // one or more db-specific imports</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">        &quot;org.scalamolecule&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> %% </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;molecule-db-h2&quot;</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;0.24.1&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">        &quot;org.scalamolecule&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> %% </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;molecule-db-mariadb&quot;</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;0.24.1&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">        &quot;org.scalamolecule&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> %% </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;molecule-db-mysql&quot;</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;0.24.1&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">        &quot;org.scalamolecule&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> %% </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;molecule-db-postgres&quot;</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;0.24.1&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">        &quot;org.scalamolecule&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> %% </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;molecule-db-sqlite&quot;</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;0.24.1&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">      )</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    )</span></span></code></pre></div><p>Use <code>%%%</code> instead of <code>%%</code> for cross-compiled Scala.js projects.</p><p>Define your <a href="/docs/setup/domain-structure">Domain Structure</a> and then run</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sbt moleculeGen</span></span></code></pre></div><p>That&#39;s it.</p><p>The MoleculePlugin will generate a minimal set of boilerplate code for your domain(s).</p><h2 id="what-is-generated" tabindex="-1"><a class="header-anchor" href="#what-is-generated"><span>What is generated?</span></a></h2><p>Molecule automatically scans your project (with ScalaMeta) to find DomainStructure definitions and generate boilerplate for those.</p><p>Say that you have two domain structure definitions Foo and Bar here:</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>src</span></span>
<span class="line"><span>└── main</span></span>
<span class="line"><span>    └── scala</span></span>
<span class="line"><span>        └── app</span></span>
<span class="line"><span>            └── Bar.scala</span></span>
<span class="line"><span>            └── Foo.scala</span></span></code></pre></div><p>Then the plugin will for each domain generate</p><ul><li>SQL schemas to create SQL databases and</li><li>DSL code to build molecules</li></ul><h3 id="sql-schemas" tabindex="-1"><a class="header-anchor" href="#sql-schemas"><span>SQL schemas</span></a></h3><p>SQL schema files for each available database are generated in the resources folder under the <code>moleculeGen</code> namespace to isolate them from other resources:</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>src</span></span>
<span class="line"><span>└── main</span></span>
<span class="line"><span>    └── resources</span></span>
<span class="line"><span>        └── moleculeGen</span></span>
<span class="line"><span>            └── Bar</span></span>
<span class="line"><span>                └── Bar_Schema_h2.sql</span></span>
<span class="line"><span>                └── Bar_Schema_mariadb.sql</span></span>
<span class="line"><span>                └── Bar_Schema_mysql.sql</span></span>
<span class="line"><span>                └── Bar_Schema_postgres.sql</span></span>
<span class="line"><span>                └── Bar_Schema_sqlite.sql</span></span>
<span class="line"><span>            └── Foo</span></span>
<span class="line"><span>                └── Foo_Schema_h2.sql</span></span>
<span class="line"><span>                └── Foo_Schema_mariadb.sql</span></span>
<span class="line"><span>                └── Foo_Schema_mysql.sql</span></span>
<span class="line"><span>                └── Foo_Schema_postgres.sql</span></span>
<span class="line"><span>                └── Foo_Schema_sqlite.sql</span></span>
<span class="line"><span>    └── scala</span></span>
<span class="line"><span>        └── app</span></span>
<span class="line"><span>            └── Bar.scala</span></span>
<span class="line"><span>            └── Foo.scala</span></span></code></pre></div><h3 id="dsl-code" tabindex="-1"><a class="header-anchor" href="#dsl-code"><span>DSL code</span></a></h3><p>Boilerplate code is generated in <code>target/scala-3.7.1/src_managed/main/moleculeGen</code>. Managed source code there is not supposed to be modified since it will be overwritten on each new generation with <code>sbt moleculeGen</code>. But you can inspect the code as normal code if you like. The following files are generated there:</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>moleculeGen</span></span>
<span class="line"><span>└── app</span></span>
<span class="line"><span>    └── dsl</span></span>
<span class="line"><span>        └── Bar</span></span>
<span class="line"><span>            └── metadb // Internal db meta information</span></span>
<span class="line"><span>                └── Bar_MetaDb</span></span>
<span class="line"><span>                └── Bar_MetaDb_h2</span></span>
<span class="line"><span>                └── Bar_MetaDb_mariadb</span></span>
<span class="line"><span>                └── Bar_MetaDb_mysql</span></span>
<span class="line"><span>                └── Bar_MetaDb_postgres</span></span>
<span class="line"><span>                └── Bar_MetaDb_sqlite</span></span>
<span class="line"><span>            └── ops</span></span>
<span class="line"><span>                └── Person_     // Person operations                 </span></span>
<span class="line"><span>                └── Address_    // Address operations</span></span>
<span class="line"><span>            └── Person      // Person entry point</span></span>
<span class="line"><span>            └── Address     // Address entry point</span></span>
<span class="line"><span>        └── Foo</span></span>
<span class="line"><span>            // Same as for Bar...</span></span></code></pre></div><p>The entry points files contain the starting points (<code>Person</code>, <code>Address</code> etc.) for your molecules:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> app.dsl.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Bar</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name.age. </span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// etc...</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.street.zip. </span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// etc...</span></span></code></pre></div><h2 id="make-jars" tabindex="-1"><a class="header-anchor" href="#make-jars"><span>Make jars</span></a></h2><p>You can also choose to package the generated code in a source and class jar with</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sbt moleculePackage</span></span></code></pre></div><p>This can save time on compiling the generated code on rebuilds. But at the moment IntelliJ can&#39;t infer Scala 3 files correctly in generated source jars (see this <a href="https://youtrack.jetbrains.com/issue/SCL-23157/Source-jar-in-lib-added-as-Classes" target="_blank" rel="noopener noreferrer">IntelliJ issue SCL-23157</a>). So for now, generating sources only with <code>sbt moleculeGen</code> is recommended.</p>`,29)]))}const r=a(l,[["render",t],["__file","sbt-setup.html.vue"]]),c=JSON.parse('{"path":"/database/setup/sbt-setup.html","title":"SBT setup","lang":"en-US","frontmatter":{"prev":"/docs/quick-start","description":"SBT setup Molecule uses the sbt MoleculePlugin to generate boilerplate code that enables you to write molecules. Add the latest version of the plugin in project/plugins.sbt: Ena...","head":[["meta",{"property":"og:url","content":"https://www.scalamolecule.org/intro/database/setup/sbt-setup.html"}],["meta",{"property":"og:site_name","content":"Molecule"}],["meta",{"property":"og:title","content":"SBT setup"}],["meta",{"property":"og:description","content":"SBT setup Molecule uses the sbt MoleculePlugin to generate boilerplate code that enables you to write molecules. Add the latest version of the plugin in project/plugins.sbt: Ena..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SBT setup\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"What is generated?","slug":"what-is-generated","link":"#what-is-generated","children":[{"level":3,"title":"SQL schemas","slug":"sql-schemas","link":"#sql-schemas","children":[]},{"level":3,"title":"DSL code","slug":"dsl-code","link":"#dsl-code","children":[]}]},{"level":2,"title":"Make jars","slug":"make-jars","link":"#make-jars","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"database/setup/sbt-setup.md","autoDesc":true}');export{r as comp,c as data};
