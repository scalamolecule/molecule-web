import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as n,o as i}from"./app-CbqJ9Ae2.js";const t={};function l(o,a){return i(),s("div",null,a[0]||(a[0]=[n(`<h1 id="inspection" tabindex="-1"><a class="header-anchor" href="#inspection"><span>Inspection</span></a></h1><p>Molecule queries are translated to raw query strings for each database and we can inspect what a molecule translates into with the command <code>inspect</code> called on <code>query</code>:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name.age.query.inspect </span><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// (returns Unit)</span></span></code></pre></div><p>This will print the MetaModel of the molecule and the produced raw query for the database to the console without querying for the data.</p><p>Here, we call it when using the H2 database, and we see the produced raw SQL query:</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>========================================</span></span>
<span class="line"><span>QUERY:</span></span>
<span class="line"><span>AttrOneManString(&quot;Person&quot;, &quot;name&quot;, V, Seq(), None, None, Nil, Nil, None, None, Seq(0, 1))</span></span>
<span class="line"><span>AttrOneManInt(&quot;Person&quot;, &quot;age&quot;, V, Seq(), None, None, Nil, Nil, None, None, Seq(0, 2))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SELECT DISTINCT</span></span>
<span class="line"><span>  Person.name,</span></span>
<span class="line"><span>  Person.age</span></span>
<span class="line"><span>FROM Person</span></span>
<span class="line"><span>WHERE</span></span>
<span class="line"><span>  Person.name IS NOT NULL AND</span></span>
<span class="line"><span>  Person.age  IS NOT NULL;</span></span>
<span class="line"><span>----------------------------------------</span></span></code></pre></div><h2 id="i" tabindex="-1"><a class="header-anchor" href="#i"><span><code>i</code></span></a></h2><p>When working on molecules we might want to do a quick check of the raw query produced without having to change our code. Then we can simply add <code>i</code> (for &quot;inspect&quot;) to <code>query</code> and apart from returning the result also print the same info as shown above.</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name.age.query.i.get ==&gt; </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  (</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;Bob&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">42</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  (</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;Liz&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">38</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><h5 id="inspection-compliance-test-h2" tabindex="-1"><a class="header-anchor" href="#inspection-compliance-test-h2"><span><a href="https://github.com/scalamolecule/molecule/blob/main/db/h2/shared/src/test/scala/molecule/db/h2/compliance/inspection/Inspect.scala" target="_blank" rel="noopener noreferrer"><i class="fas fa-handshake" style="margin-right:4px;"></i> Inspection compliance test (H2)</a></span></a></h5>`,10)]))}const c=e(t,[["render",l],["__file","inspection.html.vue"]]),h=JSON.parse('{"path":"/database/query/inspection.html","title":"Inspection","lang":"en-US","frontmatter":{"description":"Inspection Molecule queries are translated to raw query strings for each database and we can inspect what a molecule translates into with the command inspect called on query: Th...","head":[["meta",{"property":"og:url","content":"https://www.scalamolecule.org/intro/database/query/inspection.html"}],["meta",{"property":"og:site_name","content":"Molecule"}],["meta",{"property":"og:title","content":"Inspection"}],["meta",{"property":"og:description","content":"Inspection Molecule queries are translated to raw query strings for each database and we can inspect what a molecule translates into with the command inspect called on query: Th..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Inspection\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"i","slug":"i","link":"#i","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"database/query/inspection.md","autoDesc":true}');export{c as comp,h as data};
