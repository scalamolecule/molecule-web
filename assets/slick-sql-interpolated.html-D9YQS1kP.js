import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as t,a as n,e as l,w as h,r as p,o as k,b as r}from"./app-DJ6pVvp6.js";const d={};function o(c,s){const a=p("RouteLink");return k(),e("div",null,[s[1]||(s[1]=t(`<h1 id="sql-interpolated" tabindex="-1"><a class="header-anchor" href="#sql-interpolated"><span>SQL interpolated</span></a></h1><h4 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>SELECT *</span></a></h4><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">sql</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;select * from PERSON&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.as[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">].list</span></span></code></pre></div><p>With Molecule we only need to fetch the attributes that we need:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name.age.query.get</span></span></code></pre></div><p>Returned type is <code>Future[List[(String, Int)]]</code></p><h4 id="select-1" tabindex="-1"><a class="header-anchor" href="#select-1"><span>SELECT</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sql&quot;&quot;&quot;</span></span>
<span class="line"><span>  select AGE, concat(concat(concat(NAME,&#39; (&#39;),ID),&#39;)&#39;)</span></span>
<span class="line"><span>  from PERSON</span></span>
<span class="line"><span>&quot;&quot;&quot;.as[(Int,String)].list</span></span></code></pre></div><p>With Molecule we would concatenate <code>name</code> and <code>id</code> with the returned result set:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.age.name.id.query.get.map(_.map { </span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  case</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (age, name, id) =&gt; (age, </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">s</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">name</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> (</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">id</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">)&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">})</span></span></code></pre></div><h4 id="where" tabindex="-1"><a class="header-anchor" href="#where"><span>WHERE</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sql&quot;select * from PERSON where AGE &gt;= 18 AND NAME = &#39;C. Vogt&#39;&quot;.as[Person].list</span></span></code></pre></div><p>Molecule filter values by applying a required value to an attribute or supply a value to compare against (<code>&gt;=(18)</code>):</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.age.</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).name(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;C. Vogt&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).query.get</span></span></code></pre></div><p>(Again we would define which attribute values we want to return)</p><h4 id="order-by" tabindex="-1"><a class="header-anchor" href="#order-by"><span>ORDER BY</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sql&quot;select * from PERSON order by AGE asc, NAME&quot;.as[Person].list</span></span></code></pre></div><p>Ordering is applied on the result set:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.age.a1.name.query.get</span></span></code></pre></div><h4 id="aggregations" tabindex="-1"><a class="header-anchor" href="#aggregations"><span>Aggregations</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sql&quot;select max(AGE) from PERSON&quot;.as[Option[Int]].first</span></span></code></pre></div><p>Aggregate functions like <code>max</code> are all applied as a keyword value to an attribute.</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.age(max).query.get</span></span></code></pre></div><p>or get a range of top 3 values</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.age(max(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)).query.get</span></span></code></pre></div><p>We can aggregate values also with the counterpart <code>min</code> or get a random value with <code>rand</code>. Or perform aggregate calculations with <code>count</code>, <code>countDistinct</code>, <code>sum</code>, <code>avg</code>, <code>median</code>, <code>variance</code> and <code>stddev</code>.</p><h4 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by"><span>GROUP BY</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sql&quot;&quot;&quot;</span></span>
<span class="line"><span>  select ADDRESS_ID, AVG(AGE)</span></span>
<span class="line"><span>  from PERSON</span></span>
<span class="line"><span>  group by ADDRESS_ID</span></span>
<span class="line"><span>&quot;&quot;&quot;.as[(Int,Option[Int])].list</span></span></code></pre></div><p>Molecule automatically group by attributes not having an aggregate expression. In this case the query will group by <code>address</code> and calculate the average <code>age</code> for persons living there.</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.address.age(avg).query.get</span></span></code></pre></div><h4 id="having" tabindex="-1"><a class="header-anchor" href="#having"><span>HAVING</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sql&quot;&quot;&quot;</span></span>
<span class="line"><span>  select ADDRESS_ID</span></span>
<span class="line"><span>  from PERSON</span></span>
<span class="line"><span>  group by ADDRESS_ID</span></span>
<span class="line"><span>  having avg(AGE) &gt; 50</span></span>
<span class="line"><span>&quot;&quot;&quot;.as[Int].list</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.address.age(avg).query.get.map(_.filter(_._2 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 50</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span></code></pre></div><h4 id="implicit-join" tabindex="-1"><a class="header-anchor" href="#implicit-join"><span>Implicit join</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sql&quot;&quot;&quot;</span></span>
<span class="line"><span>  select P.NAME, A.CITY</span></span>
<span class="line"><span>  from PERSON P, ADDRESS A</span></span>
<span class="line"><span>  where P.ADDRESS_ID = A.id</span></span>
<span class="line"><span>&quot;&quot;&quot;.as[(String,String)].list</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.city.query.get</span></span></code></pre></div><h4 id="explicit-join" tabindex="-1"><a class="header-anchor" href="#explicit-join"><span>Explicit join</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sql&quot;&quot;&quot;</span></span>
<span class="line"><span>  select P.NAME, A.CITY</span></span>
<span class="line"><span>  from PERSON P</span></span>
<span class="line"><span>  join ADDRESS A on P.ADDRESS_ID = A.id</span></span>
<span class="line"><span>&quot;&quot;&quot;.as[(String,String)].list</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.city.query.get</span></span></code></pre></div><h4 id="left-right-outer-join" tabindex="-1"><a class="header-anchor" href="#left-right-outer-join"><span>left/right/outer join</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sql&quot;&quot;&quot;</span></span>
<span class="line"><span>  select P.NAME,A.CITY</span></span>
<span class="line"><span>  from ADDRESS A</span></span>
<span class="line"><span>  left join PERSON P on P.ADDRESS_ID = A.id</span></span>
<span class="line"><span>&quot;&quot;&quot;.as[(Option[String],String)].list</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Add \`$\` to attribute name to get optional values</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> persons</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Future</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Option</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)]] </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name$.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.city.query.get</span></span></code></pre></div><h4 id="sub-query" tabindex="-1"><a class="header-anchor" href="#sub-query"><span>Sub query</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sql&quot;&quot;&quot;</span></span>
<span class="line"><span>  select *</span></span>
<span class="line"><span>  from PERSON P</span></span>
<span class="line"><span>  where P.ADDRESS_ID in (select ID</span></span>
<span class="line"><span>                 from ADDRESS</span></span>
<span class="line"><span>                 where CITY = &#39;New York City&#39;)</span></span>
<span class="line"><span>&quot;&quot;&quot;.as[Person].list</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.age.name.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.city_(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;New York City&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).query.get</span></span></code></pre></div><h4 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>INSERT</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sqlu&quot;&quot;&quot;</span></span>
<span class="line"><span>  insert into PERSON (NAME, AGE, ADDRESS_ID) values (&#39;M Odersky&#39;, 12345, 1)</span></span>
<span class="line"><span>&quot;&quot;&quot;.first</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;M Odersky&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).age(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">12345</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).address(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).save</span></span></code></pre></div><h4 id="update" tabindex="-1"><a class="header-anchor" href="#update"><span>UPDATE</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sqlu&quot;&quot;&quot;</span></span>
<span class="line"><span>  update PERSON set NAME=&#39;M. Odersky&#39;, AGE=54321 where NAME=&#39;M Odersky&#39;</span></span>
<span class="line"><span>&quot;&quot;&quot;.first</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // Find entity id with generic Molecule attribute \`e\`</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  oderskyId &lt;- </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.id.name_(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;M Odersky&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).query.get.map(_.head)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  _ &lt;- </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(oderskyId).name(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;M. Odersky&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).age(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">54321</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).update</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">yield</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> ()</span></span></code></pre></div><h4 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span>DELETE</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sqlu&quot;&quot;&quot;</span></span>
<span class="line"><span>  delete PERSON where NAME=&#39;M. Odersky&#39;</span></span>
<span class="line"><span>&quot;&quot;&quot;.first</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Retract entity by calling \`retract\` on the entity id</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.id.name_(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;M. Odersky&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).query.get.map(_.head.retract)</span></span></code></pre></div><h4 id="case" tabindex="-1"><a class="header-anchor" href="#case"><span>CASE</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>sql&quot;&quot;&quot;</span></span>
<span class="line"><span>  select</span></span>
<span class="line"><span>    case </span></span>
<span class="line"><span>      when ADDRESS_ID = 1 then &#39;A&#39;</span></span>
<span class="line"><span>      when ADDRESS_ID = 2 then &#39;B&#39;</span></span>
<span class="line"><span>    end</span></span>
<span class="line"><span>  from PERSON P</span></span>
<span class="line"><span>&quot;&quot;&quot;.as[Option[String]].list</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.address(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> or </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).query.get.map(_.map {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  case</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;A&quot;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  case</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;B&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">})</span></span></code></pre></div><h3 id="next" tabindex="-1"><a class="header-anchor" href="#next"><span>Next</span></a></h3>`,58)),n("p",null,[l(a,{to:"/intro/compare/slick/"},{default:h(()=>s[0]||(s[0]=[r("Compare Slick...")])),_:1,__:[0]})])])}const b=i(d,[["render",o],["__file","slick-sql-interpolated.html.vue"]]),u=JSON.parse('{"path":"/database/compare/slick-sql-interpolated.html","title":"SQL interpolated","lang":"en-US","frontmatter":{"description":"SQL interpolated SELECT * With Molecule we only need to fetch the attributes that we need: Returned type is Future[List[(String, Int)]] SELECT With Molecule we would concatenate...","head":[["meta",{"property":"og:url","content":"https://www.scalamolecule.org/intro/database/compare/slick-sql-interpolated.html"}],["meta",{"property":"og:site_name","content":"Molecule"}],["meta",{"property":"og:title","content":"SQL interpolated"}],["meta",{"property":"og:description","content":"SQL interpolated SELECT * With Molecule we only need to fetch the attributes that we need: Returned type is Future[List[(String, Int)]] SELECT With Molecule we would concatenate..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SQL interpolated\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":3,"title":"Next","slug":"next","link":"#next","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"database/compare/slick-sql-interpolated.md","autoDesc":true}');export{b as comp,u as data};
