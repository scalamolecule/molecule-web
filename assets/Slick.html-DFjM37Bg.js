import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as n}from"./app-Cyt8kdYu.js";const l={};function t(h,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="slick" tabindex="-1"><a class="header-anchor" href="#slick"><span>Slick</span></a></h1><p>Compare <a href="https://scala-slick.org/doc/stable/sql-to-slick.html" target="_blank" rel="noopener noreferrer">Slick Tutorial</a> code examples with molecules in the following sections or see <a href="#slick-setup">setups</a>.</p><p><em>The molecule examples use the simple synchronous api for brevity. <a href="/docs/query/attributes#4-apis">Asynchronous/ZIO/cats.effect.IO</a> apis are also available.</em></p><h2 id="slick-setup" tabindex="-1"><a class="header-anchor" href="#slick-setup"><span>Slick Setup</span></a></h2><p>In Slick you need to define 3 things for each table in the database:</p><ul><li>A tuple type for the column values of the Table</li><li>A class for the Table columns</li><li>A <code>val</code> for a Table query</li></ul><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">object</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Tables</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  type</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> People</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">tag</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Tag</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">extends</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Table</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">](tag, </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;PERSON&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> id</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> column[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">](</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;ID&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">O</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">PrimaryKey</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">O</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">AutoInc</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> name</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> column[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">](</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;NAME&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> age</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> column[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">](</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;AGE&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> addressId</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> column[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">](</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;ADDRESS_ID&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> *</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (id, name, age, addressId)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> address</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> foreignKey(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;ADDRESS&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, addressId, addresses)(_.id)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  lazy</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> people</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> TableQuery</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">People</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  type</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Address</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Addresses</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">tag</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Tag</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">extends</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Table</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">](tag, </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;ADDRESS&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> id</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> column[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">](</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;ID&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">O</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">PrimaryKey</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">O</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">AutoInc</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> street</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> column[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">](</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;STREET&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> city</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> column[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">](</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;CITY&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> *</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (id, street, city)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  lazy</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> addresses</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> TableQuery</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Addresses</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Tables</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.*</span></span></code></pre></div><h2 id="molecule-setup" tabindex="-1"><a class="header-anchor" href="#molecule-setup"><span>Molecule Setup</span></a></h2><p>In Molecule you define things more in terms of your domain structure with only the Entities and their Attributes.</p><ul><li>Single trait for each domain entity (instead of 3 different definitions)</li><li>No redundant keywords like <code>column[..](..)</code>. In contrast, the repeating &quot;one&lt;type&gt;&quot; in the Molecule structure defines cardinality-one semantics and is therefore not redundant.</li><li>No redundant repetition of each column name (&quot;street&quot; .. &quot;STREET&quot;)</li></ul><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">object</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> People</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> DomainStructure</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  trait</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">    =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneString</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> age</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">     =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> address</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> one[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  trait</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Address</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> street</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneString</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> city</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">   =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneString</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>From this model, Molecule generates</p><ul><li>An SQL schema that we can transact to create the database</li><li>Boilerplate code to write molecule queries and transactions</li></ul><p>An important difference is also that with Molecule you don&#39;t need to decide upfront wether an attribute can be optional. You can enforce mandatory values though by adding <code>mandatory</code> after the type definition. If for instance we wanted to enforce that a code of a Country is mandatory, we could define <code>val code = oneString.mandatory</code>. For all definition options, see <a href="/docs/setup/domain-structure#attribute-options">Domain Structure</a>.</p><h2 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>Select</span></a></h2><p>The Slick equivalent of <code>SELECT *</code> is the result of the plain TableQuery:</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>// Slick</span></span>
<span class="line"><span>db.run(people.result)</span></span></code></pre></div><p>This means that you will often over-fetch data with Slick if not all attribute values of a Table are needed.</p><p>In Molecule you instead choose exactly which attributes you need and what order you want them in:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Molecule</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.id.name.age.query.get</span></span></code></pre></div><h4 id="select-certain-columns" tabindex="-1"><a class="header-anchor" href="#select-certain-columns"><span>Select certain columns</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>val query = people.map(p =&gt;</span></span>
<span class="line"><span>  (p.age, p.name ++ &quot; (&quot; ++ p.id.asColumnOf[String] ++ &quot;)&quot;)</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>db.run(query.result)</span></span></code></pre></div><p>With Molecule we would concatenate <code>name</code> and <code>id</code> from the returned result set:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.id.name.age.query.get.map {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  case</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> (id, name, age) =&gt; (age, </span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">s</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">name</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> (</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">id</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">)&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span>filter</span></a></h2><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>val query = people.filter(p =&gt; p.age &gt;= 18 &amp;&amp; p.name === &quot;C. Vogt&quot;).result</span></span>
<span class="line"><span>db.run(query.result)</span></span></code></pre></div><p>Filter by values applied to attributes in a molecule:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.age.</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).name(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;C. Vogt&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).query.get</span></span></code></pre></div><h2 id="sortby" tabindex="-1"><a class="header-anchor" href="#sortby"><span>sortBy</span></a></h2><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>val query = people.sortBy(p =&gt; (p.age.asc, p.name)).result</span></span>
<span class="line"><span>db.run(query.result)</span></span></code></pre></div><p>Add <code>a1</code> for ascending or <code>d1</code> for descending to an attribute in Molecule:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.age.a1.name.query.get</span></span></code></pre></div><p>Use a secondary sort order with <code>a2</code>/<code>d2</code> etc</p><h2 id="aggregations" tabindex="-1"><a class="header-anchor" href="#aggregations"><span>Aggregations</span></a></h2><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>val query = people.map(_.age).max.result</span></span>
<span class="line"><span>db.run(query.result)</span></span></code></pre></div><p>Aggregate functions like <code>max</code> are applied as a keyword to a molecule attribute:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.age(max).query.get</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// or get a range of top values</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.age(max(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)).query.get</span></span></code></pre></div><p>Aggregate calculations in Molecule include <code>min</code>, <code>max</code>, <code>count</code>, <code>countDistinct</code>, <code>sum</code>, <code>avg</code>, <code>median</code>, <code>variance</code>, <code>stddev</code> and <code>sample</code>.</p><h2 id="groupby" tabindex="-1"><a class="header-anchor" href="#groupby"><span>groupBy</span></a></h2><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>val query = people.groupBy(p =&gt; p.addressId)</span></span>
<span class="line"><span>  .map { case (addressId, group) =&gt; (addressId, group.map(_.age).avg) }</span></span>
<span class="line"><span>  .list</span></span>
<span class="line"><span>db.run(query.result)</span></span></code></pre></div><p>Molecule automatically groups by attributes not having an aggregate expression when the molecule has an aggregation.</p><p>In this case the query will group by <code>address</code> and calculate the average <code>age</code> for persons living there.</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.address.age(avg).query.get</span></span></code></pre></div><h2 id="groupby-filter" tabindex="-1"><a class="header-anchor" href="#groupby-filter"><span>groupBy + filter</span></a></h2><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>val query = people.groupBy(p =&gt; p.addressId)</span></span>
<span class="line"><span>  .map { case (addressId, group) =&gt; (addressId, group.map(_.age).avg) }</span></span>
<span class="line"><span>  .filter { case (addressId, avgAge) =&gt; avgAge &gt; 50 }</span></span>
<span class="line"><span>  .map(_._1)</span></span>
<span class="line"><span>  .result</span></span>
<span class="line"><span>db.run(query.result)</span></span></code></pre></div><p>Filter an aggregation value on the result in Molecule:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.address.age(avg).query.get.filter(_._2 </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 50</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><h2 id="joins" tabindex="-1"><a class="header-anchor" href="#joins"><span>Joins</span></a></h2><h4 id="implicit-join" tabindex="-1"><a class="header-anchor" href="#implicit-join"><span>Implicit join</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>val query = people.flatMap(p =&gt;</span></span>
<span class="line"><span>  addresses.filter(a =&gt; p.addressId === a.id)</span></span>
<span class="line"><span>    .map(a =&gt; (p.name, a.city))</span></span>
<span class="line"><span>).result</span></span>
<span class="line"><span>db.run(query.result)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// or equivalent for-expression:</span></span>
<span class="line"><span>val query = (for (p &lt;- people;</span></span>
<span class="line"><span>      a &lt;- addresses if p.addressId === a.id</span></span>
<span class="line"><span>      ) yield (p.name, a.city)</span></span>
<span class="line"><span>  ).result</span></span>
<span class="line"><span>db.run(query.result)</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.city.query.get</span></span></code></pre></div><h4 id="explicit-join" tabindex="-1"><a class="header-anchor" href="#explicit-join"><span>Explicit join</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>val query = (people join addresses on (_.addressId === _.id))</span></span>
<span class="line"><span>  .map { case (p, a) =&gt; (p.name, a.city) }.result</span></span>
<span class="line"><span>db.run(query.result)</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.city.query.get</span></span></code></pre></div><h4 id="left-right-outer-join" tabindex="-1"><a class="header-anchor" href="#left-right-outer-join"><span>left/right/outer join</span></a></h4><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>val query = (addresses joinLeft people on (_.id === _.addressId))</span></span>
<span class="line"><span>  .map { case (a, p) =&gt; (p.map(_.name), a.city) }.result</span></span>
<span class="line"><span>db.run(query.result)</span></span></code></pre></div><p>Left join in Molecule uses the syntax</p><pre><code>&lt;RelationshipName&gt;.?(&lt;RelatedNamespace&gt;.&lt;attributes..&gt;)
</code></pre><p>and returns <code>Option[(&lt;attribute values..)]</code></p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.?(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.city).query.get</span></span></code></pre></div><h2 id="subquery" tabindex="-1"><a class="header-anchor" href="#subquery"><span>Subquery</span></a></h2><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>val address_ids = addresses.filter(_.city === &quot;New York City&quot;).map(_.id)</span></span>
<span class="line"><span>val query       = people.filter(_.id in address_ids).result // &lt;- run as one query</span></span>
<span class="line"><span>db.run(query.result)</span></span></code></pre></div><p>Molecule doesn&#39;t directly have subqueries but the Slick example could in this case be expressed in Molecule as:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.age.name.</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.city_(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;New York City&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).query.get</span></span></code></pre></div><h2 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>Insert</span></a></h2><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>val query = people.map(p =&gt; (p.name, p.age, p.addressId))</span></span>
<span class="line"><span>  .insert((&quot;M Odersky&quot;, 12345, 1))</span></span>
<span class="line"><span>db.run(query.result)</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name.age.address.insert(</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  (</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;M Odersky&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">12345</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1L</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).transact</span></span></code></pre></div><p>Or we can populate a molecule and call <code>save</code> on it</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;M Odersky&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).age(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">12345</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).address(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).save.transact</span></span></code></pre></div><h2 id="update" tabindex="-1"><a class="header-anchor" href="#update"><span>Update</span></a></h2><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>val query = people.filter(_.name === &quot;M Odersky&quot;)</span></span>
<span class="line"><span>  .map(p =&gt; (p.name, p.age))</span></span>
<span class="line"><span>  .update((&quot;M. Odersky&quot;, 54321))</span></span>
<span class="line"><span>db.run(query.result)</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name_(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;M Odersky&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).name(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;M. Odersky&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).age(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">54321</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).update.transact</span></span></code></pre></div><h2 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span>Delete</span></a></h2><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>val query = people.filter(p =&gt; p.name === &quot;M. Odersky&quot;).delete</span></span>
<span class="line"><span>db.run(query.result)</span></span></code></pre></div><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name_(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;M. Odersky&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).delete.transact</span></span></code></pre></div><h2 id="case" tabindex="-1"><a class="header-anchor" href="#case"><span>case</span></a></h2><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span>val query = people.map(p =&gt;</span></span>
<span class="line"><span>  Case</span></span>
<span class="line"><span>    If (p.addressId === 1) Then &quot;A&quot;</span></span>
<span class="line"><span>    If (p.addressId === 2) Then &quot;B&quot;</span></span>
<span class="line"><span>).list</span></span>
<span class="line"><span>db.run(query.result)</span></span></code></pre></div><p>In Molecule we&#39;d map on the result</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.address(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).query.get.map {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  case</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;A&quot;</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  case</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;B&quot;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div>`,79)]))}const r=i(l,[["render",t],["__file","Slick.html.vue"]]),d=JSON.parse('{"path":"/database/compare/tutorials/Slick.html","title":"Slick","lang":"en-US","frontmatter":{"description":"Slick Compare Slick Tutorial code examples with molecules in the following sections or see setups. The molecule examples use the simple synchronous api for brevity. Asynchronous...","head":[["meta",{"property":"og:url","content":"https://www.scalamolecule.org/intro/database/compare/tutorials/Slick.html"}],["meta",{"property":"og:site_name","content":"Molecule"}],["meta",{"property":"og:title","content":"Slick"}],["meta",{"property":"og:description","content":"Slick Compare Slick Tutorial code examples with molecules in the following sections or see setups. The molecule examples use the simple synchronous api for brevity. Asynchronous..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Slick\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Slick Setup","slug":"slick-setup","link":"#slick-setup","children":[]},{"level":2,"title":"Molecule Setup","slug":"molecule-setup","link":"#molecule-setup","children":[]},{"level":2,"title":"Select","slug":"select","link":"#select","children":[]},{"level":2,"title":"filter","slug":"filter","link":"#filter","children":[]},{"level":2,"title":"sortBy","slug":"sortby","link":"#sortby","children":[]},{"level":2,"title":"Aggregations","slug":"aggregations","link":"#aggregations","children":[]},{"level":2,"title":"groupBy","slug":"groupby","link":"#groupby","children":[]},{"level":2,"title":"groupBy + filter","slug":"groupby-filter","link":"#groupby-filter","children":[]},{"level":2,"title":"Joins","slug":"joins","link":"#joins","children":[]},{"level":2,"title":"Subquery","slug":"subquery","link":"#subquery","children":[]},{"level":2,"title":"Insert","slug":"insert","link":"#insert","children":[]},{"level":2,"title":"Update","slug":"update","link":"#update","children":[]},{"level":2,"title":"Delete","slug":"delete","link":"#delete","children":[]},{"level":2,"title":"case","slug":"case","link":"#case","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"database/compare/tutorials/Slick.md","autoDesc":true}');export{r as comp,d as data};
